#! /usr/bin/env python

from copy import deepcopy
from flask import Flask, jsonify, request
import lxml
from optparse import OptionParser
from os import sys, path

sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))
import metsrw


# Example request: curl -v -d "@xml.xml" http://127.0.0.1:8001/api/mets
app = Flask(__name__)


@app.route('/api/mets', methods=['POST'])
def mets_route():
    # Parse body content
    mw = metsrw.METSWriter()
    try:
        mw.fromstring(request.get_data())
    except lxml.etree.XMLSyntaxError:
        response_data = {'error': 'XML syntax error'}
        response = jsonify(response=response_data)
        response.status_code = 400
        return response

    # Get file data
    files = mw.all_files()
    file_data = get_file_data(files)

    # Get metadata
    mdsecs = mw._collect_mdsec_elements(files)
    mdsec_data = get_mdsec_data(mdsecs)

    response_data = {'date': mw.createdate, 'mdsecs': mdsec_data, 'files': file_data}

    return jsonify(response=response_data)


def get_file_data(fsentries):
    file_data = []

    for entry in fsentries:
        if entry.path != 'None':
            data = deepcopy(entry.__dict__)
            del data['amdsecs']
            del data['dmdsecs']

            # Replace FSEntry object with object's UUID
            if data['derived_from'] is not None:
                data['derived_from'] = data['derived_from'].file_uuid

            file_data.append(data)

    return file_data


def get_mdsec_data(mdsecs):
    mdsec_data = []

    for mdsec in mdsecs:
        if hasattr(mdsec, 'subsections'):
            subsection_data = []

            for subsection in mdsec.subsections:
                subsection_data.append(metadata_to_dict(subsection))

            mdsec_data.append({
                'id': mdsec._id,
                'subsections': subsection_data
            })
        else:
            mdsec_data.append(metadata_to_dict(mdsec))

    return mdsec_data


def metadata_to_dict(metadata):
    data = deepcopy(metadata.__dict__)
    del data['contents']

    # Rename dict key
    data['id'] = data['_id']
    del data['_id']

    return data

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-p", "--port", dest="port", default=8001, help="TCP/IP port")

    (options, args) = parser.parse_args()

    app.run(host='0.0.0.0', port=int(options.port), debug=True)
